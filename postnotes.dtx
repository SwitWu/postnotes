% \iffalse meta-comment
% \fi
%
% \iffalse
%<*driver>
\documentclass{l3doc}

% Have \GetFileInfo pick up date and version data and used in the
% documentation.
\usepackage{postnotes}

\begin{document}

\DocInput{postnotes.dtx}

\end{document}
%</driver>
%
% \fi
%
%
% \NewDocumentCommand\opt{m}{\texttt{#1}}
%
% \pdfstringdefDisableCommands{^^A
%   \def\opt#1{#1}
% }
%
%
% ^^A Have the Index at 'section' level rather than 'part'.  Otherwise it is
% ^^A just the same definition from 'l3doc.cls'.
% \IndexPrologue{^^A
%   \section*{Index}
%   \markboth{Index}{Index}
%   \addcontentsline{toc}{section}{Index}
%   The italic numbers denote the pages where the corresponding entry is
%   described, numbers underlined point to the definition, all others indicate
%   the places where it is used.^^A
% }
%
%
% \GetFileInfo{postnotes.sty}
%
% \title{^^A
%   The \pkg{postnotes} package^^A
%   \thanks{This file describes \fileversion, released \filedate.}^^A
%   \texorpdfstring{\\{}\medskip{}}{ - }^^A
%   Code documentation^^A
%   \texorpdfstring{\medskip{}}{}^^A
% }
%
% \author{^^A
%   Gustavo Barros^^A
%   \thanks{\url{https://github.com/gusbrs/postnotes}}^^A
% }
%
% \date{\filedate}
%
% \maketitle
%
%
% \tableofcontents
%
%
% \section{Initial setup}
% Start the \pkg{DocStrip} guards.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\LaTeX3 \pkg{DocStrip} convention).
%    \begin{macrocode}
%<@@=postnotes>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ProvidesExplPackage {postnotes} {2022-03-24} {0.1.0}
  {Endnotes for LaTeX}
%    \end{macrocode}
%
%
% \section{Data}
%
%    \begin{macrocode}

% <note id>
\cs_new:Npn \@@_data_name:n #1
  { g_@@_ #1 _data_prop }
\cs_generate_variant:Nn \@@_data_name:n { e }

% <note id><note content>
\cs_new_protected:Npn \@@_store:nn #1#2
  {
    \prop_new:c { \@@_data_name:e {#1} }
    \prop_gput:cnn { \@@_data_name:e {#1} } { type } { note }
    \prop_gput:cnx { \@@_data_name:e {#1} } { mark } { \l_@@_mark_tl }
    \prop_gput:cnx { \@@_data_name:e {#1} } { sortnum }
      {
        \bool_if:NTF \l_@@_manual_sortnum_bool
          { \fp_use:N \l_@@_sort_num_fp }
          { \int_use:N \c@postnote }
      }
    \cs_if_exist:cT { chapter }
      {
        \prop_gput:cnx { \@@_data_name:e {#1} }
          { thechapter } { \thechapter }
      }
    \prop_gput:cnx { \@@_data_name:e {#1} } { thesection } { \thesection }
    \prop_gput:cnx { \@@_data_name:e {#1} } { pnsectlabel }
      { \g_@@_section_label_tl }
    \prop_gput:cnx { \@@_data_name:e {#1} } { pnsectid }
      { \int_use:N \g_@@_sectid_int }
    \prop_gput:cnx { \@@_data_name:e {#1} } { multibool }
      { \bool_to_str:N \l_@@_maybe_multi_bool }
    \prop_gput:cnn { \@@_data_name:e {#1} } { content } {#2}
  }

% <note id><note content>
\cs_new_protected:Npn \@@_store_section:nn #1#2
  {
    \prop_new:c { \@@_data_name:e {#1} }
    \prop_gput:cnn { \@@_data_name:e {#1} } { type } { section }
    \cs_if_exist:cT { chapter }
      {
        \prop_gput:cnx { \@@_data_name:e {#1} }
          { thechapter } { \thechapter }
      }
    \prop_gput:cnx { \@@_data_name:e {#1} } { thesection } { \thesection }
    \prop_gput:cnn { \@@_data_name:e {#1} } { content } {#2}
  }


% <note id><prop><tl var>
\cs_new_protected:Npn \@@_prop_get:nnN #1#2#3
  {
    \prop_get:cnNF { \@@_data_name:e {#1} } {#2} #3
      { \tl_clear:N #3 }
  }
% <note id><prop>
\cs_new:Npn \@@_prop_item:nn #1#2
  { \prop_item:cn { \@@_data_name:e {#1} } {#2} }
% <note id>
\cs_new_protected:Npn \@@_prop_gclear:n #1
  { \prop_gclear:c { \@@_data_name:e {#1} } }

\tl_const:Nn \c_@@_ref_prefix_tl { postnote@r }
\cs_new_protected:Npx \post@note
  { \exp_not:N \@newl@bel { \c_@@_ref_prefix_tl } }

\cs_new_protected:Npn \@@_set_mark_page_label:n #1
  {
    \iow_shipout_x:Nn \@auxout
      { \post@note { mark@ #1 } { \thepage } }
  }
\cs_generate_variant:Nn \@@_set_mark_page_label:n { x }
\cs_new_protected:Npn \@@_set_text_page_label:n #1
  {
    \iow_shipout_x:Nn \@auxout
      { \post@note { text@ #1 } { \int_use:N \c@page } }
  }
\cs_generate_variant:Nn \@@_set_text_page_label:n { x }
\cs_new_protected:Npn \@@_set_print_page_label:n #1
  {
    \iow_shipout_x:Nn \@auxout
      { \post@note { print@ #1 } { \int_use:N \c@page } }
  }
\cs_generate_variant:Nn \@@_set_print_page_label:n { x }

\cs_new_protected:Npn \@@_get_pageref:Nn #1#2
  {
    \cs_if_exist:cTF { \c_@@_ref_prefix_tl @ #2 }
      { \tl_set:Nv #1 { \c_@@_ref_prefix_tl @ #2 } }
      { \tl_clear:N #1 }
  }
\cs_generate_variant:Nn \@@_get_pageref:Nn { Nx }
\cs_new:Npn \@@_extract_pageref:n #1
  {
    \cs_if_exist:cTF { \c_@@_ref_prefix_tl @ #1 }
      { \exp_not:v { \c_@@_ref_prefix_tl @ #1 } }
      { \c_empty_tl }
  }
\cs_generate_variant:Nn \@@_extract_pageref:n { e }
%    \end{macrocode}
%
%
% \section{Options}
%
%
% \subsection*{\opt{heading} option}
%
%    \begin{macrocode}
\keys_define:nn { postnotes/print }
  {
    heading .cs_set_protected:Np = \pnheading ,
    heading .value_required:n = true ,
  }
\cs_if_exist:cTF { chapter }
  {
    \cs_new_protected:Npn \pnheading
      {
        % TODO This value is just for testing, set better default later.
        \cleardoublepage{}
        % \markright{\pnHeaderChapsPages}
        \markright{\pnheaderdefault}
        \chapter{\pntitle}
        % \@mkboth{\pnHeaderChapsPages}{\pnHeaderChapsPages}
        \@mkboth{\pnheaderdefault}{\pnheaderdefault}
        % \markboth{\pnHeaderChapsPages}{\pnHeaderChapsPages}
        \thispagestyle{headings}
      }
  }
  {
    \cs_new_protected:Npn \pnheading
      {
        \section*{\pntitle}
        \@mkboth{\pnheaderdefault}{\pnheaderdefault}
      }
  }
%    \end{macrocode}
%
%
% \subsection*{\opt{format} option}
%
%    \begin{macrocode}
\tl_new:N \l_@@_print_format_tl
\keys_define:nn { postnotes/print }
  {
    format .tl_set:N = \l_@@_print_format_tl ,
    format .initial:n = { \small } ,
    format .value_required:n = true ,
  }
%    \end{macrocode}
%
%
% \subsection*{\opt{listenv} option}
%
%    \begin{macrocode}
\tl_new:N \l_@@_print_env_tl
\bool_new:N \l_@@_print_as_list_bool
\keys_define:nn { postnotes/print }
  {
    listenv .code:n =
      {
        \tl_if_eq:nnTF {#1} { none }
          {
            \bool_set_false:N \l_@@_print_as_list_bool
            % A sensible default just in case.  It should not get to be used
            % though.
            \tl_set:Nn \l_@@_print_env_tl { itemize }
          }
          {
            \bool_set_true:N \l_@@_print_as_list_bool
            \tl_set:Nn \l_@@_print_env_tl {#1}
          }
      } ,
    listenv .initial:n = { postnoteslist } ,
    listenv .value_required:n = true ,
  }



% The horizontal setup of the label in these lists is based on the
% \texttt{description} environment of the standard classes (see the \emph{The
% \LaTeX{} Companion}).

\NewDocumentEnvironment { postnoteslist } { }
  {
    \begin{list} { }
      {
        % horizontal
        \setlength { \leftmargin }    { 0pt }
        \setlength { \labelwidth }    { 0pt }
        \setlength { \itemindent }    { .5\parindent }
        \cs_set_eq:NN \makelabel \@@_list_makelabel:n
        \setlength { \rightmargin }   { 0pt }
        \setlength { \listparindent } { \parindent }
        % vertical
        \setlength { \parsep }    { \parskip }
        \setlength { \itemsep }   { 0pt }
        \setlength { \topsep }    { .5\topsep }
        \setlength { \partopsep } { .5\partopsep }
      }
  }
  { \end{list} }

\cs_new:Npn \@@_list_makelabel:n #1
  { \hspace { \labelsep } \normalfont ~ #1 }

\NewDocumentEnvironment { postnoteslisthang } { }
  {
    \begin{list} { }
      {
        % horizontal
        \setlength { \leftmargin }    { 1em }
        \setlength { \labelwidth }    { -\leftmargin }
        \setlength { \itemindent }    { -2\leftmargin }
        \cs_set_eq:NN \makelabel \@@_list_makelabel:n
        \setlength { \rightmargin }   { 0pt }
        \setlength { \listparindent } { \parindent }
        % vertical
        \setlength { \parsep }    { \parskip }
        \setlength { \itemsep }   { 0pt }
        \setlength { \topsep }    { .5\topsep }
        \setlength { \partopsep } { .5\partopsep }
      }
  }
  { \end{list} }
%    \end{macrocode}
%
%
% \subsection*{\opt{makemark} and \opt{maketextmark} options}
%
%    \begin{macrocode}
\keys_define:nn { postnotes/package }
  {
    makemark .code:n =
      { \cs_set_nopar:Npn \@@_make_mark:n ##1 {#1} } ,
    makemark .value_required:n = true ,
    % From the default definition of \cs{@makefnmark} in the kernel.
    makemark .initial:n =
      { \hbox:n { \@textsuperscript { \normalfont #1 } } } ,
    maketextmark .code:n =
      { \cs_set_nopar:Npn \@@_make_text_mark:n ##1 {#1} } ,
    maketextmark .value_required:n = true ,
    maketextmark .initial:n = { #1 . } ,
  }
%    \enc{macrocode}

% \subsection*{\opt{hyperref} and \opt{backref} options}
%
%    \begin{macrocode}
\bool_new:N \l_@@_hyperlink_bool
\bool_new:N \l_@@_hyperref_warn_bool
\bool_new:N \l_@@_backref_bool
\keys_define:nn { postnotes/package }
  {
    hyperref .choice: ,
    hyperref / auto .code:n =
      {
        \bool_set_true:N \l_@@_hyperlink_bool
        \bool_set_false:N \l_@@_hyperref_warn_bool
      } ,
    hyperref / true .code:n =
      {
        \bool_set_true:N \l_@@_hyperlink_bool
        \bool_set_true:N \l_@@_hyperref_warn_bool
      } ,
    hyperref / false .code:n =
      {
        \bool_set_false:N \l_@@_hyperlink_bool
        \bool_set_false:N \l_@@_hyperref_warn_bool
      } ,
    hyperref .initial:n = auto ,
    hyperref .default:n = true ,
    backref .bool_set:N = \l_@@_backref_bool ,
    backref .initial:n = true ,
    backref .default:n = true ,
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\msg_new:nnn { postnotes } { option-preamble-only }
  { Option~'#1'~only~available~in~the~preamble~\msg_line_context:. }
\msg_new:nnn { postnotes } { missing-hyperref }
  { Missing~'hyperref'~package.~Setting~'hyperref=false'. }
\AddToHook { begindocument }
  {
    \IfPackageLoadedTF { hyperref }
      { }
      {
        \bool_if:NT \l_@@_hyperref_warn_bool
          { \msg_warning:nn { postnotes } { missing-hyperref } }
        \bool_set_false:N \l_@@_hyperlink_bool
      }
    \keys_define:nn { postnotes/setup }
      {
        hyperref .code:n =
          {
            \msg_warning:nnn { postnotes }
              { option-preamble-only } { hyperref }
          } ,
        backref .code:n =
          {
            \msg_warning:nnn { postnotes }
              { option-preamble-only } { backref }
          } ,
      }
  }

%    \end{macrocode}
%
%
% \subsection*{\opt{sort} option}
%
%    \begin{macrocode}
\bool_new:N \l_@@_sort_bool
\keys_define:nn { postnotes/print }
  {
    sort .bool_set:N = \l_@@_sort_bool ,
    sort .initial:n = true ,
    sort .default:n = true ,
  }
%    \end{macrocode}
%
%
% \subsection{\cs{postnotesetup}}
%
%
% \begin{macro}[int]{\postnotesetup}
%   Provide \cs{postnotesetup}.
%   \begin{syntax}
%     \cs{postnotesetup}\marg{options}
%   \end{syntax}
%    \begin{macrocode}
\NewDocumentCommand \postnotesetup { m }
  { \keys_set:nn { postnotes/setup } {#1} }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\keys_define:nn { }
  {
    postnotes/setup .inherit:n =
      {
        postnotes/package ,
        postnotes/print ,
      }
  }
%    \end{macrocode}
%
% \section{\cs{postnote}}
%
% Different from the traditional \cs{footnotemark} / \cs{footnotetext} system,
% in the context of end notes, the functionality which corresponds to
% \cs{footnotetext} is simply to store the data to be typeset later.  Hence,
% some of the problems that afflict footnotes do not apply to end notes.
% Namely, and as far as I can tell, they can be used in ``inner horizontal
% mode'' (\cs{mbox} etc.), and in math mode, and if the ``text'' will be
% typeset in the same page as the ``mark'' is of little concern.
%
% However, the separation between ``mark'' and ``text'' is still useful in
% other contexts: floats and contexts where multiple typesetting passes are
% performed.  The questions are: if they are replaceable in their roles in
% these contexts and if how much would we lose by providing them.
%
% In analyzing this, we have to distinguish two situations: when
% \cs{footnotemark} is called with no argument (and thus steps the counter),
% and when it is called with the optional argument (and thus refrains from
% stepping the counter).
%
% For floats, the problem they pose is that they may disturb the
% \emph{ordering} of the notes.  This particular issue can be solved by using
% \cs{footnotemark} without argument, and manually adjusting the counter on
% subsequent calls to \cs{footnotetext}.  A good example of the technique:
% \url{https://tex.stackexchange.com/a/43694}.  True, a user may wish to
% specify the mark explicitly, but doesn't necessarily need to do it to solve
% the ordering issue.
%
% Multiple typesetting passes of content are much harder.  And they abound:
% the standard classes' \cs{caption} typesets the caption once, if it is
% short, but twice if it is longer than a line; \pkg{amsmath}'s math
% environments perform a measuring pass before actually typesetting the
% equations; \pkg{tabularx} and \pkg{tabularray} do similarly with their
% tables; so does \pkg{csquotes}' blockquotes; and certainly more that I'm
% unaware.  A number of these places offer some one or another way to mitigate
% the issue: \pkg{amsmath}, \pkg{tabularx}, \pkg{csquotes} and (optionally)
% \pkg{tabularray} restore counter values after measuring steps;
% \pkg{csquotes} offers further handles.  But the standard \cs{caption} offers
% none, and there's really no way around it.  Well, the pkg{caption} package
% has this possibility as an option, but it is not reasonable to require it
% for our purposes, so we must assume the worst case.
%
% Enrico Gregorio is categorical in stating that \cs{endnotemark} and
% \cs{endnotetext} are required for \pkg{enotez} to handle \cs{caption}, which
% apparently it didn't offer them originally: ``The package should implement
% \cs{endnotemark} and \cs{endnotetext} for this case.  According to the
% documentation, the author deems them to not be needed: he's wrong.''
% (\url{https://tex.stackexchange.com/a/314937}).  See also
% \url{https://tex.stackexchange.com/a/43794} and
% \url{https://tex.stackexchange.com/a/358207}.
%
% David Carlisle and Ulrike Fischer shared some thoughts on the matter on the
% TeX.SX chat:
% \url{https://chat.stackexchange.com/transcript/message/60754383#60754383}.
%
% In this scenario, when there's no way around the multiple passes,
% \cs{footnotemark} can only handle the case if used with an argument,
% precisely because it inhibits the stepping of the counter.  Otherwise the
% counter is stepped multiple times, and we'd get the wrong number (and mark).
% So, if \emph{not stepping the counter} is what's needed to get a
% corresponding \cs{postenotemark} to handle this case, is it viable to do so?
% What would we loose in so doing?
%
% Receiving an arbitrary number as argument, as the kernel functionality for
% footnotes and other endnotes packages do, this value is expected to the
% printed as such, hence it must correspond to the \texttt{postnote} counter.
% But this counter is in the hands of the user, and can be reset along the
% document, thus its uniqueness cannot be ensured.  But not stepping
% \texttt{postnote} is perfectly viable, as it just aims at storing how the mark
% is to be typeset.  However, not stepping the ID counter complicates things
% considerably.  Not doing so implies we'd lose the connection we have between
% the ``mark'' and the corresponding ``text''.  We might add the ``text'' to
% the queue, but all the metadata would be lost, including the \pkg{hyperref}
% anchor, but really the set of data without which the kind of functionality
% offered would be nonviable, or severely hampered.  Not stepping
% \texttt{postnote} but stepping the ID counter also is not sufficient,
% because we'd get a note in duplicity.  We could naively think that a gap in
% the ID is not a problem, and just not add the duplicate to the queue.  But
% how could we tell the difference between a legitimate and an illegitimate
% step of the ID counter?
%
% I have not been able to devise a way to ``reconnect'' these two in the
% absence of the unique ID counter.  The most promising idea was to have
% mandatory arguments to \cs{postnotemark} and \cs{postnotetext} receiving a
% \meta{label} which we could use to identify their counterparts, but I was
% not able to go through with this, and the attempts all increased complexity
% considerably.  It is not just a label/ref system, there's got to be a
% one-to-one correspondence between the sets, uniqueness has to be ensured on
% both sides, and there cannot be ``lone'' marks or texts (a bijection).
% Besides, this label based system of identification would have to live
% side-by-side with the one based on the counter.  So, even if we'd have
% unique IDs, we wouldn't know beforehand in what form it comes.  Considering
% the ID is used to build the variable name in which we store the note's
% information, this also complicates things.
%
% Besides, there are ways to get things working with multiple passes, even if
% sub-optimally, without the ``mark''/''text'' partition.  Hopefully we can
% offer support for cases which offer some kind of ``handle'' or way to
% identify the multiple passes.  \pkg{csquotes} has a dedicated hook that can
% be used.  We could probably leverage the across the board restoring of
% counters by \pkg{amsmath}, \pkg{tabularx} and \pkg{tabularray} to know if we
% could refrain from adding a note in duplicity to the queue (to be
% verified). \pkg{amsmath} sets the \texttt{measuring@} boolean (which
% \pkg{hyperref} also defines).  So, not all cases are as bad as \cs{caption}.
% Still, even where they are, we can have a \opt{nomark} option to
% \cs{postnote} to place a note, but typeset no mark. Than we can typeset a
% mark with \cs{postnoteref} referring to a \cs{label} in the note of
% interest.  This would result in a correct mark without duplicity, and in a
% correct link from there to the note's text at \cs{printpostnotes}.  The
% drawback is that the placement of \cs{postnote} would be important, and
% results sensitive to it.  All the metadata is collected at the point of
% \cs{postnote}, anchor included, not at the point of \cs{postnoteref}.  So
% the consequences are a slightly off backref, possibly imprecise metadata,
% etc.  Considering \pkg{hyperref} itself shies away completely from linking
% \cs{footnotemark} with an argument, I'd say there's some gain.
%
% So the truth is we're between a rock and a hard place.  There's no ``ideal''
% solution (or I can't find it\dots{}).  Still, all in all, my judgment is
% that the unique ID counter is worth more than the inconveniences of the last
% resort \opt{nomark} \cs{postnote} and \cs{postnoteref}.  So, for the time
% being, until something else shakes this balance, I won't be offering
% \cs{postnotemark} and \cs{postnotetext}.
%
%
%
% For the \pkg{hyperref} support for cross-references in \cs{postnote}, I've
% moved back and forth quite a lot.  One of the ideas I fancied was using
% \cs{refstepcounter} and let \pkg{hyperref} do its job.  But, since I want to
% have control of the anchor/destination name on both ``sides'', I'd have to
% set \cs{theHpostnote} locally before calling \cs{refstepcounter}, otherwise
% results might sensitive to user calls to \cs{counterwithin} (see
% \url{https://github.com/latex3/hyperref/issues/230}, thanks Ulrike Fischer).
% However, even if that worked well for the default case, we still had to
% setup things manually, in case of a manually supplied mark.  All in all, I'm
% just calling \cs{stepcounter}, setting the relevant cross-reference
% variables once and setting the anchor manually.


%    \begin{macrocode}
\int_new:N \g_@@_note_id_int
\tl_new:N \l_@@_note_id_tl
\tl_set:Nn \l_@@_note_id_tl { \int_use:N \g_@@_note_id_int }
\seq_new:N \g_@@_queue_seq
\newcounter { postnote }
\NewHook { postnotes/note }


\NewDocumentCommand \postnote { O { } +m }
  { \@@_note:nn {#1} {#2} }

% <options><note content>
\cs_new_protected:Npn \@@_note:nn #1#2
  {
    \group_begin:
    \keys_set:nn { postnotes/note } {#1}
    \@@_inhibit_note:F
      {
        \int_gincr:N \g_@@_note_id_int
        \tl_if_empty:NT \l_@@_mark_tl
          {
            \stepcounter { postnote }
            \tl_set:Nx \l_@@_mark_tl { \thepostnote }
          }
        \seq_gput_right:Nx \g_@@_queue_seq { \l_@@_note_id_tl }
        \UseHook { postnotes/note }
        \cs_set:Npn \@currentcounter { postnote }
        \cs_set:Npx \@currentlabel { \p@postnote \l_@@_mark_tl }
        \@@_hyperref_make_currentHref:n { postnote. \l_@@_note_id_tl .mark }
        \@@_set_mark_page_label:x { \l_@@_note_id_tl }
        \@@_set_user_labels:
        \bool_if:NTF \l_@@_nomark_bool
          {
            \bool_if:NT \l_@@_hyperlink_bool
              {
                \@@_hyperref_set_anchor:n
                  { postnote. \l_@@_note_id_tl .mark }
              }
          }
          { \@@_typeset_mark:xV { \l_@@_note_id_tl } \l_@@_mark_tl }
        \@@_store:nn { \l_@@_note_id_tl } {#2}
      }
    \group_end:
  }


\bool_new:N \l_@@_inhibit_note_bool
\bool_new:N \l_@@_print_plain_mark_bool
\NewHook { postnotes/note/inhibit }
\prg_new_protected_conditional:Npnn \@@_inhibit_note: { F }
  {
    \bool_set_false:N \l_@@_inhibit_note_bool
    \bool_set_false:N \l_@@_print_plain_mark_bool
    \UseHook { postnotes/note/inhibit }
    % Printing a "dumb" mark here may be needed because, if we are inhibiting
    % the note at a "measuring context" and omit it completely, the measuring
    % being performed will be off by the size of the mark.  So, to ensure the
    % measuring is performed correctly, we place the mark.  The increment to
    % \c@postnote is done locally and grouped and \thepostnote is smuggled out
    % of the group.
    \bool_if:NT \l_@@_print_plain_mark_bool
      {
        \tl_if_empty:NT \l_@@_mark_tl
          {
            \group_begin:
            \int_incr:N \c@postnote
            \exp_args:NNNx
              \group_end:
              \tl_set:Nn \l_@@_mark_tl { \thepostnote }
          }
        \@@_typeset_mark_wrapper:n
          { \@@_make_mark:n { \l_@@_mark_tl } }
      }
    \bool_if:NTF \l_@@_inhibit_note_bool
      { \prg_return_true:  }
      { \prg_return_false: }
  }

\tl_new:N \l_@@_mark_tl
\bool_new:N \l_@@_nomark_bool
\fp_new:N \l_@@_sort_num_fp
\tl_new:N \l_@@_note_label_tl
\bool_new:N \l_@@_manual_sortnum_bool
\keys_define:nn { postnotes/note }
  {
    mark .tl_set:N = \l_@@_mark_tl ,
    mark .value_required:n = true ,
    nomark .bool_set:N = \l_@@_nomark_bool ,
    nomark .default:n = true ,
    sortnum .code:n =
      {
        \fp_set:Nn \l_@@_sort_num_fp {#1}
        \bool_set_true:N \l_@@_manual_sortnum_bool
      } ,
    sortnum .value_required:n = true ,
    label .tl_set:N = \l_@@_note_label_tl ,
    label .value_required:n = true ,
  }


% <note id><mark>
\cs_new_protected:Npn \@@_typeset_mark:nn #1#2
  {
    \@@_typeset_mark_wrapper:n
      {
        \bool_if:NTF \l_@@_hyperlink_bool
          {
            \@@_hyperref_set_anchor:n { postnote. #1 .mark }
            \hyperlink { postnote. #1 .text } { \@@_make_mark:n {#2} }
          }
          { \@@_make_mark:n {#2} }
      }
  }
\cs_generate_variant:Nn \@@_typeset_mark:nn { xV }


% From the definition of \cs{@footnotemark} in the kernel.
\tl_new:N \l_@@_saved_spacefactor_tl
% <mark>
\cs_new_protected:Npn \@@_typeset_mark_wrapper:n #1
  {
    \mode_leave_vertical:
    \mode_if_horizontal:T
      {
        \tl_set:Nx \l_@@_saved_spacefactor_tl { \the\spacefactor }
        \nobreak
      }
    #1
    \mode_if_horizontal:T
      { \spacefactor \l_@@_saved_spacefactor_tl }
    \scan_stop:
  }


\cs_new_protected:Npn \@@_set_user_labels:
  {
    \tl_if_empty:NF \l_@@_note_label_tl
      { \exp_args:NV \label \l_@@_note_label_tl }
   \tl_if_empty:NF \l_@@_note_zlabel_tl
      { \exp_args:NV \zlabel \l_@@_note_zlabel_tl }
  }


\NewDocumentCommand \postnoteref { s m }
  { \@@_note_ref:nn {#1} {#2} }

\cs_new_protected:Npn \@@_note_ref:nn #1#2
  {
    \group_begin:
    \@@_typeset_mark_wrapper:n
      {
        \bool_lazy_and:nnTF
          { ! #1 }
          { \l_@@_hyperlink_bool }
          { \hyperref [#2] { \@@_make_mark:n { \ref*{#2} } } }
          { \@@_make_mark:n { \@@_ref_star:n {#2} } }
      }
    \group_end:
  }
%    \end{macrocode}
%
%
% \section{\cs{postnotesection}}
%
%    \begin{macrocode}
\int_new:N \g_@@_sectid_int

\NewDocumentCommand \postnotesection { O { } +m }
  { \@@_section:nn {#1} {#2} }

\cs_new_protected:Npn \@@_section:nn #1#2
  {
    \group_begin:
    \int_gincr:N \g_@@_note_id_int
    \int_gincr:N \g_@@_sectid_int
    \seq_gput_right:Nx \g_@@_queue_seq { \l_@@_note_id_tl }
    \tl_gclear:N \g_@@_section_label_tl
    \keys_set:nn { postnotes/section } {#1}
    \@@_store_section:nn { \l_@@_note_id_tl } {#2}
    \group_end:
  }

\tl_new:N \g_@@_section_label_tl
\keys_define:nn { postnotes/section }
  {
    label .tl_gset:N = \g_@@_section_label_tl ,
    label .value_required:n = true ,
  }

%    \end{macrocode}
%
%
% \section{\cs{printpostnotes}}
%
%    \begin{macrocode}
\NewDocumentCommand \printpostnotes { O { } }
  { \@@_print_notes:n {#1} }

\int_new:N \g_@@_print_postnotes_int
\tl_new:N \l_@@_print_note_id_tl
\tl_new:N \l_@@_print_note_id_next_tl
\tl_new:N \l_@@_print_mark_tl
\tl_new:N \l_@@_print_type_curr_tl
\tl_new:N \l_@@_print_type_next_tl
\tl_new:N \l_@@_print_type_prev_tl
\tl_new:N \l_@@_print_content_tl
\seq_new:N \l_@@_clear_queue_seq
\tl_new:N \pnthechapter
\tl_new:N \pnthesection
\tl_new:N \pnthepage
\tl_new:N \pnthechapternextnote
\tl_new:N \pnthesectionnextnote

\NewHook { postnotes/print }

\newcounter { postnotesection }

\cs_new_protected:Npn \@@_print_notes:n #1
  {
    \group_begin:
    \int_gincr:N \g_@@_print_postnotes_int
    \keys_set:nn { postnotes/print } {#1}
    \UseHook { postnotes/print }
    \tl_set:Nn \l_@@_print_type_prev_tl { open }
    \tl_gclear:N \g_@@_section_label_tl
    \seq_if_empty:NTF \g_@@_queue_seq
      {
        % TODO warn
      }
      {
        \pnheading
        \AddToHook { shipout/before } [ postnotes/header ]
          { \@@_set_headers_vars_next: }
        \@@_verify_multipass:N \g_@@_queue_seq
        \bool_if:NT \l_@@_sort_bool
          { \@@_sort_queue:N \g_@@_queue_seq }
        \@@_get_headers_data:N \g_@@_queue_seq
        \@@_set_headers_vars_first:
        \bool_until_do:nn { \seq_if_empty_p:N \g_@@_queue_seq }
          {
            \seq_gpop_left:NN \g_@@_queue_seq \l_@@_print_note_id_tl
            \seq_push:NV \l_@@_clear_queue_seq \l_@@_print_note_id_tl
            \@@_prop_get:nnN { \l_@@_print_note_id_tl }
              { type } \l_@@_print_type_curr_tl
            \seq_if_empty:NTF \g_@@_queue_seq
              {
                \tl_set:Nn \l_@@_print_note_id_next_tl { noid }
                \tl_set:Nn \l_@@_print_type_next_tl { close }
              }
              {
                \seq_get_left:NN \g_@@_queue_seq \l_@@_print_note_id_next_tl
                \@@_prop_get:nnN { \l_@@_print_note_id_next_tl }
                  { type } \l_@@_print_type_next_tl
              }
            % Ensure the first note after a heading has paragraph indentation.
            % 'endnotes' uses a workaroundish solution in '\enoteheading'
            % setting a box and then skipping back a line.  @egreg is correct
            % though, in criticizing it at
            % https://tex.stackexchange.com/q/575905#comment1450213_575915,
            % and suggests the use of '\@afterindenttrue', which is the same
            % thing that 'indentfirst' uses (we just do it locally), thanks
            % Enrico Gregorio.
            \bool_if:NF \l_@@_print_as_list_bool
              {
                \cs_set_eq:NN \@afterindentfalse \@afterindenttrue
                \@afterindenttrue
              }
            \tl_if_eq:NnTF \l_@@_print_type_curr_tl { section }
              {
                % type_curr = 'section'
                % We only process the entry if type_next is 'note': here are
                % skipped empty sections.
                \tl_if_eq:NnT \l_@@_print_type_next_tl { note }
                  {
                    \stepcounter { postnotesection }
                    \group_begin:
                    \@@_prop_get:nnN { \l_@@_print_note_id_tl }
                      { thechapter } \pnthechapter
                    \@@_prop_get:nnN { \l_@@_print_note_id_tl }
                      { thesection } \pnthesection
                    \@@_prop_get:nnN { \l_@@_print_note_id_next_tl }
                      { thechapter } \pnthechapternextnote
                    \@@_prop_get:nnN { \l_@@_print_note_id_next_tl }
                      { thesection } \pnthesectionnextnote
                    \@@_prop_get:nnN { \l_@@_print_note_id_tl }
                      { content } \l_@@_print_content_tl
                    \l_@@_print_content_tl
                    \group_end:
                    % Set type_prev for the next iteration.
                    \tl_set:NV \l_@@_print_type_prev_tl
                      \l_@@_print_type_curr_tl
                  }
              }
              {
                % type_curr = 'note'
                \tl_if_eq:NnF \l_@@_print_type_prev_tl { note }
                  {
                    \bool_if:NT \l_@@_print_as_list_bool
                      { \exp_args:Nx \begin { \l_@@_print_env_tl } }
                    \l_@@_print_format_tl
                  }
                \group_begin:
                \@@_get_pageref:Nx \pnthepage
                  { mark@ \l_@@_print_note_id_tl }
                \@@_prop_get:nnN { \l_@@_print_note_id_tl }
                  { mark } \l_@@_print_mark_tl
                \@@_prop_get:nnN { \l_@@_print_note_id_tl }
                  { content } \l_@@_print_content_tl
                \cs_set:Npn \@currentcounter { postnote }
                \cs_set:Npx \@currentlabel
                  { \p@postnote \l_@@_print_mark_tl }
                \@@_hyperref_make_currentHref:n
                  { postnote. \l_@@_print_note_id_tl .text }
                \@@_text_mark_wrapper:n
                  {
                    \@@_set_text_page_label:x { \l_@@_print_note_id_tl }
                    \@@_typeset_text_mark:eV
                      { \l_@@_print_note_id_tl }
                      \l_@@_print_mark_tl
                  }
                \l_@@_print_content_tl
                \group_end:
                \bool_if:NTF \l_@@_print_as_list_bool
                  {
                    \tl_if_eq:NnF \l_@@_print_type_next_tl { note }
                      { \exp_args:Nx \end { \l_@@_print_env_tl } }
                  }
                  { \par }
                % Set type_prev for the next iteration.
                \tl_set:NV \l_@@_print_type_prev_tl
                  \l_@@_print_type_curr_tl
              }
          }
        \AddToHookNext { shipout/after }
          { \RemoveFromHook { shipout/before } [ postnotes/header ] }
        % We won't use the variables anymore, clear it to reduce memory usage.
        \seq_map_inline:Nn \l_@@_clear_queue_seq
          { \@@_prop_gclear:n { #1 } }
      }
    \group_end:
  }

\cs_new:Npn \@@_text_mark_wrapper:n #1
  {
    \bool_if:NTF \l_@@_print_as_list_bool
      { \item [ #1 ] }
      { #1 }
  }

\cs_new:Npn \@@_typeset_text_mark:nn #1#2
  {
    \bool_if:NTF \l_@@_hyperlink_bool
      {
        \@@_hyperref_set_anchor:n { postnote. #1 .text }
        \bool_if:NTF \l_@@_backref_bool
          { \hyperlink { postnote. #1 .mark } { \@@_make_text_mark:n {#2} } }
          { \@@_make_text_mark:n {#2} }
      }
      { \@@_make_text_mark:n {#2} }
  }
\cs_generate_variant:Nn \@@_typeset_text_mark:nn { eV }


% This is a general attempt at a ``last resort'' for handling cases of
% multiple passes of content.  Ideally, the job should be done at
% \cs{@@_inhibit_note:F} if at all possible.  But, failing that, we can rely
% on the fact that \cs{postnote}s of measuring/trial passes don't end up being
% output and hence don't generate labels in the \texttt{.aux} file.
% However, and despite this being a general test, and a reasonable one, I'd
% like to restrain it's use to the minimum possible.  First, doing so across
% the board would result in large swings and numerous warnings in an initial
% compilation.  Second, and most importantly, there's some risk in dropping
% notes, so we only consider the possibility where it is unavoidable.  For
% signaling the ``eligibility'' for this check, the note must have been stored
% with the \cs{l_@@_maybe_multi_bool} boolean set to \texttt{true}, which is
% then saved in the \texttt{multibool} property.
\bool_new:N \l_@@_maybe_multi_bool
\cs_new_protected:Npn \@@_verify_multipass:N #1 % \g_@@_queue_seq
  {
    \group_begin:
    \seq_clear:N \l_tmpa_seq
    \seq_map_inline:Nn #1
      {
        \@@_prop_get:nnN {##1} { multibool } \l_tmpa_tl
        \tl_if_eq:NnTF \l_tmpa_tl { true }
          {
            \cs_if_exist:cT
              { \c_@@_ref_prefix_tl @ mark@ ##1 }
              { \seq_put_right:Nn \l_tmpa_seq {##1} }
          }
          { \seq_put_right:Nn \l_tmpa_seq {##1} }
      }
    \seq_gset_eq:NN #1 \l_tmpa_seq
    \group_end:
  }


%    \end{macrocode}
%
%
% \section{Sorting}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_sort_queue:N #1 % \g_@@_queue_seq
  {
    \group_begin:
    \seq_gsort:Nn #1
      {
        \@@_prop_get:nnN {##1} { pnsectid } \l_tmpa_tl
        \@@_prop_get:nnN {##2} { pnsectid } \l_tmpb_tl
        \tl_if_eq:NNTF \l_tmpa_tl \l_tmpb_tl
          {
            \@@_prop_get:nnN {##1} { type } \l_tmpa_tl
            \@@_prop_get:nnN {##2} { type } \l_tmpb_tl
            \bool_lazy_and:nnTF
              { \str_if_eq_p:Vn \l_tmpa_tl { note } }
              { \str_if_eq_p:Vn \l_tmpb_tl { note } }
              {
                \@@_prop_get:nnN {##1} { sortnum } \l_tmpa_tl
                \@@_prop_get:nnN {##2} { sortnum } \l_tmpb_tl
                \fp_compare:nNnTF { \l_tmpa_tl } > { \l_tmpb_tl }
                  { \sort_return_swapped: }
                  { \sort_return_same:    }
              }
              { \sort_return_same: }
          }
          { \sort_return_same: }
      }
    \group_end:
  }
%    \end{macrocode}
%
%
% \section{Headers}
%
%    \begin{macrocode}
\tl_new:N \pnhdpagefirst
\tl_new:N \pnhdpagelast
\tl_new:N \pnhdchapfirst
\tl_new:N \pnhdchaplast
\tl_new:N \pnhdsectfirst
\tl_new:N \pnhdsectlast
\tl_new:N \pnhdlabelfirst
\tl_new:N \pnhdlabellast
\prop_new:N \g_@@_header_page_first_prop
\prop_new:N \g_@@_header_page_last_prop
\prop_new:N \g_@@_header_chap_first_prop
\prop_new:N \g_@@_header_chap_last_prop
\prop_new:N \g_@@_header_sect_first_prop
\prop_new:N \g_@@_header_sect_last_prop
\prop_new:N \g_@@_header_label_first_prop
\prop_new:N \g_@@_header_label_last_prop
\tl_new:N \g_@@_header_prev_last_page_tl
\tl_new:N \g_@@_header_prev_last_chap_tl
\tl_new:N \g_@@_header_prev_last_sect_tl
\tl_new:N \g_@@_header_prev_last_label_tl
\tl_new:N \l_@@_prev_text_page_tl
\tl_new:N \l_@@_curr_text_page_tl
\tl_new:N \l_@@_prev_mark_page_tl
\tl_new:N \l_@@_prev_mark_chap_tl
\tl_new:N \l_@@_prev_mark_sect_tl
\tl_new:N \l_@@_prev_mark_label_tl
\cs_new_protected:Npn \@@_get_headers_data:N #1 % \g_@@_queue_seq
  {
    \group_begin:
    \tl_gclear:N \pnhdpagefirst
    \tl_gclear:N \pnhdpagelast
    \tl_gclear:N \pnhdchapfirst
    \tl_gclear:N \pnhdchaplast
    \tl_gclear:N \pnhdsectfirst
    \tl_gclear:N \pnhdsectlast
    \tl_gclear:N \pnhdlabelfirst
    \tl_gclear:N \pnhdlabellast
    \prop_gclear:N \g_@@_header_page_first_prop
    \prop_gclear:N \g_@@_header_page_last_prop
    \prop_gclear:N \g_@@_header_chap_first_prop
    \prop_gclear:N \g_@@_header_chap_last_prop
    \prop_gclear:N \g_@@_header_sect_first_prop
    \prop_gclear:N \g_@@_header_sect_last_prop
    \prop_gclear:N \g_@@_header_label_first_prop
    \prop_gclear:N \g_@@_header_label_last_prop
    \tl_gclear:N \g_@@_header_prev_last_page_tl
    \tl_gclear:N \g_@@_header_prev_last_chap_tl
    \tl_gclear:N \g_@@_header_prev_last_sect_tl
    \tl_gclear:N \g_@@_header_prev_last_label_tl
    \tl_clear:N \l_@@_prev_text_page_tl
    \tl_clear:N \l_@@_curr_text_page_tl
    \tl_clear:N \l_@@_prev_mark_page_tl
    \tl_clear:N \l_@@_prev_mark_chap_tl
    \tl_clear:N \l_@@_prev_mark_sect_tl
    \tl_clear:N \l_@@_prev_mark_label_tl
    \seq_map_inline:Nn #1
      {
        \exp_args:Nx \tl_if_eq:nnT
          { \@@_prop_item:nn {##1} { type } }
          { note }
          {
            \@@_get_pageref:Nn \l_@@_curr_text_page_tl { text@ ##1 }
            \tl_if_empty:NF \l_@@_curr_text_page_tl
              {
                \tl_if_eq:NNTF
                  \l_@@_prev_text_page_tl
                  \l_@@_curr_text_page_tl
                  {
                    % we are in the same page as the previous note, just store
                    % the 'prev_mark' data.
                    \@@_get_pageref:Nn
                      \l_@@_prev_mark_page_tl { mark@ ##1 }
                    \@@_prop_get:nnN {##1} { thechapter }
                      \l_@@_prev_mark_chap_tl
                    \@@_prop_get:nnN {##1} { thesection }
                      \l_@@_prev_mark_sect_tl
                    \@@_prop_get:nnN {##1} { pnsectlabel }
                      \l_@@_prev_mark_label_tl
                  }
                  {
                    % We are in the transition of pages (or in the very first
                    % note, given \l_@@_prev_text_page_tl is initialized to
                    % empty).

                    % Set 'first' values for current page, based on the
                    % current note id.
                    \prop_gput:Nxx \g_@@_header_page_first_prop
                      { \l_@@_curr_text_page_tl }
                      { \@@_extract_pageref:n { mark@ ##1 } }
                    \prop_gput:Nxx \g_@@_header_chap_first_prop
                      { \l_@@_curr_text_page_tl }
                      { \@@_prop_item:nn {##1} { thechapter } }
                    \prop_gput:Nxx \g_@@_header_sect_first_prop
                      { \l_@@_curr_text_page_tl }
                      { \@@_prop_item:nn {##1} { thesection } }
                    \prop_gput:Nxx \g_@@_header_label_first_prop
                      { \l_@@_curr_text_page_tl }
                      { \@@_prop_item:nn {##1} { pnsectlabel } }

                    % Set 'last' values for previous page, based on the stored
                    % above (on the T branch).  There is no previous page to
                    % the first one of \printpostnotes (so we don't set 'last'
                    % values for it, conditioning on \l_@@_prev_text_page_tl
                    % being empty, which only occurs on the first note).
                    \tl_if_empty:NF \l_@@_prev_text_page_tl
                      {
                        \prop_gput:Nxx \g_@@_header_page_last_prop
                          { \l_@@_prev_text_page_tl }
                          { \l_@@_prev_mark_page_tl }
                        \prop_gput:Nxx \g_@@_header_chap_last_prop
                          { \l_@@_prev_text_page_tl }
                          { \l_@@_prev_mark_chap_tl }
                        \prop_gput:Nxx \g_@@_header_sect_last_prop
                          { \l_@@_prev_text_page_tl }
                          { \l_@@_prev_mark_sect_tl }
                        \prop_gput:Nxx \g_@@_header_label_last_prop
                          { \l_@@_prev_text_page_tl }
                          { \l_@@_prev_mark_label_tl }
                      }

                    % Set \l_@@_prev_text_page_tl for the next iteration
                    % (\l_@@_curr_text_page_tl is never empty at this point,
                    % since we conditioned to it).
                    \tl_set:NV \l_@@_prev_text_page_tl
                      \l_@@_curr_text_page_tl
                  }
              }
          }
      }

    % We can't catch the transition from the last page of \printpostnotes to
    % the following one through the mapping above, but the 'prev_mark' values
    % of the last note in the loop are the ones we want, so we set 'last'
    % values for the last page based on them.
    \tl_if_empty:NF \l_@@_prev_text_page_tl
      {
        \prop_gput:Nxx \g_@@_header_page_last_prop
          { \l_@@_prev_text_page_tl }
          { \l_@@_prev_mark_page_tl }
        \prop_gput:Nxx \g_@@_header_chap_last_prop
          { \l_@@_prev_text_page_tl }
          { \l_@@_prev_mark_chap_tl }
        \prop_gput:Nxx \g_@@_header_sect_last_prop
          { \l_@@_prev_text_page_tl }
          { \l_@@_prev_mark_sect_tl }
        \prop_gput:Nxx \g_@@_header_label_last_prop
          { \l_@@_prev_text_page_tl }
          { \l_@@_prev_mark_label_tl }
      }
    \group_end:
  }

% The sequence of pages processed in \cs{@@_get_headers_data:N} is not ensured
% to be continuous, since not every page of \cs{printpostnotes} starts a
% note.  There may be notes that fill whole pages, or the last page of the
% notes may end with a note that started on the penultimate page.  We must
% handle this case at this point.  For every page for which there is
% information provided by \cs{@@_get_headers_data:N} we store a
% 'header_prev_last' (the last value of the previous header) for each of the
% variables of interest.  If the next page is skipped in the sequence (no
% notes starting on it), we can use these stored values to set both 'first'
% and 'last' variables based on them for that page.
\cs_new_protected:Npn \@@_set_headers_vars:n #1
  {
    \group_begin:
    \prop_get:NnNTF \g_@@_header_page_first_prop
      {#1} \l_tmpa_tl
      { \tl_gset:NV \pnhdpagefirst \l_tmpa_tl }
      { \tl_gset:NV \pnhdpagefirst \g_@@_header_prev_last_page_tl }
    \prop_get:NnNTF \g_@@_header_page_last_prop
      {#1} \l_tmpa_tl
      {
        \tl_gset:NV \pnhdpagelast \l_tmpa_tl
        \tl_gset:NV \g_@@_header_prev_last_page_tl \l_tmpa_tl
      }
      { \tl_gset:NV \pnhdpagelast \g_@@_header_prev_last_page_tl }
    \prop_get:NnNTF \g_@@_header_chap_first_prop
      {#1} \l_tmpa_tl
      { \tl_gset:NV \pnhdchapfirst \l_tmpa_tl }
      { \tl_gset:NV \pnhdchapfirst \g_@@_header_prev_last_chap_tl }
    \prop_get:NnNTF \g_@@_header_chap_last_prop
      {#1} \l_tmpa_tl
      {
        \tl_gset:NV \pnhdchaplast \l_tmpa_tl
        \tl_gset:NV \g_@@_header_prev_last_chap_tl \l_tmpa_tl
      }
      { \tl_gset:NV \pnhdchaplast \g_@@_header_prev_last_chap_tl }
    \prop_get:NnNTF \g_@@_header_sect_first_prop
      {#1} \l_tmpa_tl
      { \tl_gset:NV \pnhdsectfirst \l_tmpa_tl }
      { \tl_gset:NV \pnhdsectfirst \g_@@_header_prev_last_sect_tl }
    \prop_get:NnNTF \g_@@_header_sect_last_prop
      {#1} \l_tmpa_tl
      {
        \tl_gset:NV \pnhdsectlast \l_tmpa_tl
        \tl_gset:NV \g_@@_header_prev_last_sect_tl \l_tmpa_tl
      }
      { \tl_gset:NV \pnhdsectlast \g_@@_header_prev_last_sect_tl }
    \prop_get:NnNTF \g_@@_header_label_first_prop
      {#1} \l_tmpa_tl
      { \tl_gset:NV \pnhdlabelfirst \l_tmpa_tl }
      { \tl_gset:NV \pnhdlabelfirst \g_@@_header_prev_last_label_tl }
    \prop_get:NnNTF \g_@@_header_label_last_prop
      {#1} \l_tmpa_tl
      {
        \tl_gset:NV \pnhdlabellast \l_tmpa_tl
        \tl_gset:NV \g_@@_header_prev_last_label_tl \l_tmpa_tl
      }
      { \tl_gset:NV \pnhdlabellast \g_@@_header_prev_last_label_tl }
    \group_end:
  }
\cs_generate_variant:Nn \@@_set_headers_vars:n { x }

\cs_new_protected:Npn \@@_set_headers_vars_next:
  { \@@_set_headers_vars:x { \int_eval:n { \c@page + 1 } } }

\cs_new_protected:Npn \@@_set_headers_vars_first:
  {
    \@@_set_print_page_label:x { \int_use:N \g_@@_print_postnotes_int }
    \@@_set_headers_vars:x
      {
        \@@_extract_pageref:e
          { print@ \int_use:N \g_@@_print_postnotes_int }
      }
  }

\cs_new_protected:Npn \@@_header_default:
  {
    \tl_if_eq:NNTF \pnhdpagefirst \pnhdpagelast
      { \pnhdnotes{} ~ \pnhdtopage{} ~ \pnhdpagefirst }
      { \pnhdnotes{} ~ \pnhdtopages{} ~ \pnhdpagefirst -- \pnhdpagelast }
  }
\NewDocumentCommand \pnheaderdefault {} { \@@_header_default: }
%    \end{macrocode}
%
%
% \section{Compatibility}
%
%
%    \begin{macrocode}
\bool_new:N \g_@@_hyperref_loaded_bool
\AddToHook { package/hyperref/after }
  { \bool_gset_true:N \g_@@_hyperref_loaded_bool }

\cs_new_protected:Npn \@@_hyperref_make_currentHref:n #1
  {
    \bool_if:NT \g_@@_hyperref_loaded_bool
      { \Hy@MakeCurrentHref {#1} }
  }
\cs_new_protected:Npn \@@_hyperref_set_anchor:n #1
  {
    \bool_if:NT \g_@@_hyperref_loaded_bool
      { \Hy@raisedlink { \hyper@anchor {#1} } }
  }
\cs_new_protected:Npn \@@_ref_star:n #1
  {
    \bool_if:NTF \g_@@_hyperref_loaded_bool
      { \ref*{#1} }
      { \ref{#1} }
  }

\AddToHook { package/biblatex/after }
  {
    % Let biblatex know we are in a 'notes' context.  See
    % https://tex.stackexchange.com/a/304464, including comments.
    \AddToHook { postnotes/print } [ postnotes ]
      { \toggletrue { blx@footnote } }
  }


\tl_new:N \l_@@_note_zlabel_tl
\AddToHook { package/zref-user/after }
  {
    \keys_define:nn { postnotes/note }
      {
        zlabel .tl_set:N = \l_@@_note_zlabel_tl ,
        zlabel .value_required:n = true ,
      }
    \NewDocumentCommand \postnotezref { s m }
      { \@@_note_zref:nn {#1} {#2} }
    \cs_new_protected:Npn \@@_note_zref:nn #1#2
      {
        \group_begin:
        \@@_typeset_mark_wrapper:n
          {
            \bool_lazy_and:nnTF
              { ! #1 }
              { \l_@@_hyperlink_bool }
              { \hyperref [#2] { \@@_make_mark:n { \zref{#2} } } }
              { \@@_make_mark:n { \zref{#2} } }
          }
        \group_end:
      }
  }

\AddToHook { package/zref-clever/after }
  {
    \zcsetup { countertype = { postnote = endnote } }
    \AddToHook { postnotes/print } [ postnotes ]
      { \zcsetup { counterresetby = { postnote = postnotesection } } }
  }

\AddToHook { package/amsmath/after }
  {
    % Testing for \cs{ifmeasuring@} is sufficient to get things right for
    % the measuring passes in math environments.
    \AddToHook { postnotes/note/inhibit } [ postnotes ]
      {
        \legacy_if:nT { measuring@ }
          {
            \bool_set_true:N \l_@@_inhibit_note_bool
            \bool_set_true:N \l_@@_print_plain_mark_bool
          }
      }
    % However, the '\text' macro, defined by 'amstext.sty' (required by
    % amsmath), poses problems if its own.  Despite my best efforts, I could
    % not salvage things from the use of '\mathchoice' and the redefinitions
    % of '\setcounter' and '\addtocounter' performed by 'amstext'.  Setting
    % \l_@@_maybe_multi_bool when firstchoice@ is false grants us a working
    % situation for display style.  But the use of '\postnote' inside '\text'
    % (and, if amsmath is loaded, \textnormal, \textup, etc.) in inline math
    % environments is not supported.  If a note really needs to be there, one
    % can use 'nomark' and '\postnoteref'.  Things should work in text mode
    % and in display style.
    \AddToHook { postnotes/note } [ postnotes ]
      {
        \legacy_if:nF { firstchoice@ }
          { \bool_set_true:N \l_@@_maybe_multi_bool }
      }
  }

\AddToHook { package/csquotes/after }
  {
    \bool_new:N \l_@@_csquotes_measuring_bool
    \BlockquoteDisable
      { \bool_set_true:N \l_@@_csquotes_measuring_bool }
    \AddToHook { postnotes/note/inhibit } [ postnotes ]
      {
        \bool_if:NT \l_@@_csquotes_measuring_bool
          {
            \bool_set_true:N \l_@@_inhibit_note_bool
            \bool_set_true:N \l_@@_print_plain_mark_bool
          }
      }
  }

\AddToHook { package/tabularx/after }
  {
    \bool_new:N \l_@@_tabularx_inside_env_bool
    \AddToHook { env/tabularx/begin } [ postnotes ]
      {
        \bool_set_true:N \l_@@_tabularx_inside_env_bool
        \cs_set_eq:NN \@@_tabularx_saved_write:Nn \write
      }
    \AddToHook { postnotes/note/inhibit } [ postnotes ]
      {
        \bool_lazy_and:nnT
          { \l_@@_tabularx_inside_env_bool }
          {
            % For the identification of the trial passes here, see
            % https://tex.stackexchange.com/a/640035 (including discussion in
            % the comments, thanks David Carlisle), and also
            % https://tex.stackexchange.com/a/227155 and
            % https://tex.stackexchange.com/a/352134.
            ! \cs_if_eq_p:NN \write \@@_tabularx_saved_write:Nn
          }
          {
            \bool_set_true:N \l_@@_inhibit_note_bool
            \bool_set_true:N \l_@@_print_plain_mark_bool
          }
      }
  }

\AddToHook { package/tabularray/after }
  {
    % I've tried, but I could not find any "handle" to distinguish in
    % 'tabularray' a trial/measure pass from the final one.  So we use
    % \@@_verify_multipass:N for it.
    \clist_map_inline:nn
      { tblr , longtblr , talltblr , booktabs , longtabs , talltabs , +array }
      {
        \AddToHook { env/#1/begin } [ postnotes ]
          { \bool_set_true:N \l_@@_maybe_multi_bool }
      }
  }
%    \end{macrocode}
%
%
% \section{Languages}
%
%
%    \begin{macrocode}
\tl_new:N \pntitle
\tl_new:N \pnhdnotes
\tl_new:N \pnhdtopage
\tl_new:N \pnhdtopages
\tl_set:Nn \pntitle { Notes }
\tl_set:Nn \pnhdnotes { Notes }
\tl_set:Nn \pnhdtopage { to~page }
\tl_set:Nn \pnhdtopages { to~pages }


% <postnote language><extras>
\cs_new_protected:Npn \@@_define_language:nn #1#2
  {
    \tl_new:c { g_@@_language_ #1 _tl }
    \tl_gset:cn { g_@@_language_ #1 _tl } {#2}
  }


% For \pkg{babel} we use the new hook system, it's clean, and avoids
% the \cs{addto} pitfalls.  The hook is \texttt{babel/\meta{language}/beforeextras} so that users
% can override it with a traditional
% \texttt{\textbackslash{}addto\textbackslash{}extras\meta{language}}.

% Note that, for \pkg{babel}, the captions are currently handled in two different ways --
% the ``old way'' and the ``new way'' -- and which of them is used depends on
% the language.  Most still use the ``old way'', but the problem is that it is
% not universal.  And the ``new way'' uses a different naming scheme --
% \texttt{\textbackslash{}\meta{language}\meta{caption}}, which is meant to be
% set with \cs{setlocalecaption}, and not suitable for our needs.  The
% \texttt{\textbackslash{}extras\meta{language}} macros are meant for
% ``arbitrary'' code to be run when the language is selected, which is what we
% want.  The captions used to work in the same way, but no longer for
% languages which use the ``new way''.

% Note also that there seems to exist some qualms
% about `babel's '\addto'.  A number of packages define their own versions of
% it: varioref (probably the original), backref, cleveref.  The latter
% comments that `\addto` is "flawed". 'babel' itself comments the definition
% recognizing that there is an "inconsistency", depending on the case, the
% operation will be either local or global.  This is documented in the manual,
% which explains this inconsistent behavior is preserved for backward
% compatibility, and recommends 'etoolbox's facilities if available.
% Polyglossia also recommends `etoolbox's `\gappto'.  All in all, if there's
% need to use the traditional way instead of the new hooks, just rely
% on `expl3' and use `\tl_gput_right:Nn'.

% <babel language><postnote language>
\cs_new_protected:Npn \@@_set_babel_language:nn #1#2
  {
    \ActivateGenericHook { babel/#1/beforeextras }
    \exp_args:Nnv \AddToHook { babel/#1/beforeextras }
      { g_@@_language_ #2 _tl }
  }


% \pkg{polyglossia} uses a similar set of macros for setting up languages as
% \pkg{babel} does.
% However, the \texttt{\textbackslash{}blockextras@\meta{language}} macros are
% unfortunately internal (despite what the manual says, that's what the code
% does), thus requiring \cs{makeatletter}/\cs{makeatother} for user
% configuration, which would be an inconvenience.  On the other hand,
% \pkg{polyglossia}'s \texttt{\textbackslash{}captions\meta{language}} works
% as \pkg{babel}'s ``old way'', meaning it is just a ``hook'' to which we can
% append some code.  So we use
% \texttt{\textbackslash{}captions\meta{language}} for \pkg{polyglossia}.
% Things may complicate here if there's need to set up different values for
% different language variants, since the hooks available are all necessarily
% internal, but I doubt we'll ever need variants for these simple strings.

% <polyglossia language><postnote language>
\cs_new_protected:Npn \@@_set_polyglossia_language:nn #1#2
  {
    \AddToHook { package/polyglossia/after }
      {
        \exp_args:Nnv \csgappto { captions #1 }
          { g_@@_language_ #2 _tl }
      }
  }


\@@_define_language:nn { english }
  {
    \tl_set:Nn \pntitle     { Notes }
    \tl_set:Nn \pnhdnotes   { Notes }
    \tl_set:Nn \pnhdtopage  { to~page }
    \tl_set:Nn \pnhdtopages { to~pages }
  }
\@@_set_babel_language:nn { english }    { english }
\@@_set_babel_language:nn { american }   { english }
\@@_set_babel_language:nn { australian } { english }
\@@_set_babel_language:nn { british }    { english }
\@@_set_babel_language:nn { canadian }   { english }
\@@_set_babel_language:nn { newzealand } { english }
\@@_set_babel_language:nn { UKenglish }  { english }
\@@_set_babel_language:nn { USenglish }  { english }
\@@_set_polyglossia_language:nn { english } { english }

\@@_define_language:nn { portuguese }
  {
    \tl_set:Nn \pntitle     { Notas }
    \tl_set:Nn \pnhdnotes   { Notas }
    \tl_set:Nn \pnhdtopage  { da~página }
    \tl_set:Nn \pnhdtopages { das~páginas }
  }
\@@_set_babel_language:nn { portuguese } { portuguese }
\@@_set_babel_language:nn { brazilian }  { portuguese }
\@@_set_babel_language:nn { portuges }   { portuguese }
\@@_set_babel_language:nn { brazil }     { portuguese }
\@@_set_polyglossia_language:nn { portuguese } { portuguese }
%    \end{macrocode}
%
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% \PrintIndex
%
%
